@page "/weather"

@inject IWeatherService WeatherService

@rendermode InteractiveServer

<style>
    h2 {
        text-align: center;
    }
</style>

<PageTitle>Weather</PageTitle>

<FluentLabel Typo="Typography.PageTitle">Weather</FluentLabel>
<FluentLabel Typo="Typography.H2" Alignment="HorizontalAlignment.Center">@Message</FluentLabel>
<FluentStack Orientation="Orientation.Vertical">
    <FluentTextField Label="Location"
                     Placeholder="Search for a location"
                     Required
                     @bind-Value="location" />
    <FluentButton OnClick="RetrieveForecast" Appearance="Appearance.Accent">Search</FluentButton>
</FluentStack>


@if (forecasts == null)
{
    
}
else
{
    <FluentGrid>
        <FluentGridItem xs="12">
            <FluentDataGrid Id="weathergrid" Items=@forecasts ResizableColumns="true" Pagination="@pagination" Style="height: 405px; overflow:auto;">
                <PropertyColumn Title="Date" Property="@(c => c!.dtDateTime)" Sortable="true" Align=Align.Start />
                <PropertyColumn Title="Temp. (C)" Property="@(c => c!.main.temp)" Sortable="true" Align=Align.Center />
                <TemplateColumn Title="Summary" Align=Align.End>
                    @foreach (var weather in context!.weather)
                    {
                        <div>@weather.main</div>
                    }
                </TemplateColumn>
            </FluentDataGrid>
            <FluentPaginator State="@pagination" />
        </FluentGridItem>
</FluentGrid>
}

@code {
    private string? location;
    private string Message = "Search for a location";

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private WeatherForecastDTO? weatherForecast;
    private IQueryable<List>? forecasts;

    async Task RetrieveForecast()
    {
        WeatherForecastDTO weatherForecast = new();
        weatherForecast = await WeatherService.GetWeatherForecast(location);
        if (weatherForecast.list != null)
        {
            this.forecasts = weatherForecast.list.AsQueryable();
            Message = $"Weather forecast for {location}";
        }
        else
        {
            Message = "Search for a location";
            forecasts = null;
        }
    }
}
