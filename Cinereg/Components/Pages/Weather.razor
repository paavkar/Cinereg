@page "/weather"

@inject IWeatherService WeatherService

@rendermode InteractiveServer

<style>
    h2 {
        text-align: center;
    }
</style>

<PageTitle>Weather</PageTitle>

<FluentLabel Typo="Typography.PageTitle">Weather</FluentLabel>
<FluentLabel Typo="Typography.H2" Alignment="HorizontalAlignment.Center">@Message</FluentLabel>
<FluentStack Orientation="Orientation.Vertical">
    <FluentTextField Label="Location"
                     Placeholder="Search for a location"
                     Required
                     @bind-Value="location" />
    <FluentButton OnClick="RetrieveForecast" Appearance="Appearance.Accent">Search</FluentButton>
</FluentStack>


@if (forecasts == null)
{

}
else
{
    <FluentGrid>
        @foreach (var item in forecasts)
        {
            <FluentGridItem xs="12" sm="12" md="6" lg="3" xl="2">
                <FluentCard Style="margin-top: 1rem;" Width="20em;">
                    <FluentStack>
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentLabel Typo="Typography.H5">
                                Date
                                <FluentLabel Typo="Typography.Body">
                                    @item.dtDateTime.ToLocalTime().ToShortDateString()
                                </FluentLabel>
                            </FluentLabel>
                            <FluentLabel Typo="Typography.H5">
                                Time
                                <FluentLabel Typo="Typography.Body">
                                    @item.dtDateTime.ToLocalTime().ToShortTimeString() (UTC+@TimeZoneInfo.Local.GetUtcOffset(item.dtDateTime.ToLocalTime()).Hours)
                                </FluentLabel>
                            </FluentLabel>
                            @foreach (var weather in item.weather)
                            {
                                switch (weather.main)
                                {
                                    case "Snow":
                                        <FluentIcon Value="@(new Icons.Regular.Size48.WeatherSnowflake())" />
                                        break;
                                    case "Clear":
                                        <FluentIcon Value="@(new Icons.Regular.Size48.WeatherSunny())" />
                                        break;
                                    case "Rain":
                                        <FluentIcon Value="@(new Icons.Regular.Size48.WeatherRain())" />
                                        break;
                                    case "Clouds":
                                        <FluentIcon Value="@(new Icons.Regular.Size48.WeatherCloudy())" />
                                        break;
                                    default: break;
                                }
                                <FluentLabel Typo="Typography.Body">@weather.description[0].ToString().ToUpper()@weather.description.Substring(1)</FluentLabel>
                            }
                        </FluentStack>
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentLabel Typo="Typography.H5">
                                Temperature
                                <FluentLabel Typo="Typography.Body">
                                    @item.main.temp °C
                                </FluentLabel>
                            </FluentLabel>
                            
                            <FluentLabel Typo="Typography.H5">
                                Wind
                                <FluentLabel Typo="Typography.Body">
                                    @item.wind.speed m/s
                                </FluentLabel>
                            </FluentLabel>

                            <FluentLabel Typo="Typography.H5">
                                Humidity
                                <FluentLabel Typo="Typography.Body">
                                    @item.main.humidity %
                                </FluentLabel>
                            </FluentLabel>
                        </FluentStack>
                    </FluentStack>


                </FluentCard>
            </FluentGridItem>

        }
    </FluentGrid>
    @* <FluentGrid>
        <FluentGridItem xs="12">
            <FluentDataGrid Id="weathergrid" Items=@forecasts ResizableColumns="true" Pagination="@pagination" Style="height: 405px; overflow:auto;">
                <PropertyColumn Title="Date" Property="@(c => c!.dtDateTime)" Sortable="true" Align=Align.Start />
                <PropertyColumn Title="Temp. (C)" Property="@(c => c!.main.temp)" Sortable="true" Align=Align.Center />
                <TemplateColumn Title="Summary" Align=Align.End>
                    @foreach (var weather in context!.weather)
                    {
                        <div>@weather.main</div>
                    }
                </TemplateColumn>
            </FluentDataGrid>
            <FluentPaginator State="@pagination" />
        </FluentGridItem>
    </FluentGrid> *@
}

@code {
    private string? location;
    private string Message = "Search for a location";

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private WeatherForecastDTO? weatherForecast;
    private IQueryable<List>? forecasts;

    async Task RetrieveForecast()
    {
        WeatherForecastDTO weatherForecast = new();
        weatherForecast = await WeatherService.GetWeatherForecast(location);
        if (weatherForecast.list != null)
        {
            this.forecasts = weatherForecast.list.AsQueryable();
            Message = $"4-day weather forecast for {location}";
        }
        else
        {
            Message = "Search for a location";
            forecasts = null;
        }
    }
}
