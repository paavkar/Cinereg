@page "/edit-movie"
@page "/edit-movie/{id}"

@rendermode InteractiveServer

@inject IMovieService MovieService
@inject NavigationManager NavigationManager
@inject SimpleUserAccessor UserAccessor

@if (Id == null)
{
    <FluentLabel Typo="Typography.PageTitle">Add a movie</FluentLabel>
}
else
{
    <FluentLabel Typo="Typography.PageTitle">Edit @Movie.Name</FluentLabel>
}
<FluentGrid>
    <FluentGridItem xs="8">
        <EditForm Model="@Movie" OnValidSubmit="Submit" FormName="editMovie">
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Label="Title"
                                 Placeholder="Enter the movie title"
                                 Required="true"
                                 Size=30
                                 @bind-Value="Movie!.Name" />
                <FluentTextField Label="Genre"
                                 Placeholder="Enter the movie genre"
                                 Required="true"
                                 Size=30
                                 @bind-Value="Movie!.Genre" />
                <FluentTextField Label="Director"
                                 Placeholder="Enter the movie director"
                                 Required="true"
                                 Size=30
                                 @bind-Value="Movie!.Director" />
                <FluentNumberField Label="Release year"
                                   Placeholder="Enter the movie release year"
                                   Required="true"
                                   Size=26
                                   @bind-Value="Movie!.ReleaseYear" />
                <FluentNumberField Label="Watched year"
                                   Placeholder="Enter the year you watched the movie"
                                   Required="true"
                                   Size=26
                                   @bind-Value="Movie!.WatchedYear" />
                <FluentTextField Label="Viewing format"
                                 Placeholder="Enter the movie viewing format"
                                 Required="true"
                                 Size=30
                                 @bind-Value="Movie!.ViewingForm" />
                <FluentSelect Items=@reviewOptions
                              OptionText="@(i => i.Text)"
                              OptionValue="@(i => i.Value)"
                              OptionSelected="@(i => i.Selected)"
                              Label="Did you enjoy/like the movie?"
                              @bind-Value="Movie!.Review" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Loading="@Loading">Submit</FluentButton>
            </FluentStack>
        </EditForm>
    </FluentGridItem>
</FluentGrid>

@code {
    private bool Loading = false;

    static List<Option<string>> reviewOptions = new()
    {
        { new Option<string> { Value = "Yes", Text = "Yes", Selected = true } },
        { new Option<string> { Value = "No", Text = "No",  } },
    };

    [Parameter]
    public string? Id { get; set; }

    private ApplicationUser user { get; set; } = default!;

    [SupplyParameterFromForm]
    private Movie Movie { get; set; } = new();

    protected override void OnInitialized() => Movie ??= new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            Movie = await MovieService.GetMovieById(Id);
            reviewOptions = new()
            {
                { new Option<string> { Value = Movie.Review, Text = Movie.Review, Selected = true } },
                { new Option<string> { Value = Movie.Review == "Yes" ? "No" : "Yes", Text = Movie.Review == "Yes" ? "No" : "Yes",  } },
            };
        }
    }

    async Task Submit()
    {
        Loading = true;
        if (Id == null)
        {
            Movie.UserId = user.Id;
            await MovieService.AddMovie(Movie);
            Loading = false;
            NavigationManager.NavigateTo("/movies");
        }
        else
        {
            await MovieService.UpdateMovie(Id, Movie);
            Loading = false;
        }
    }
}