@page "/edit-movie"
@page "/edit-movie/{id}"
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer

@inject IMovieService MovieService
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject UserAccessor UserAccessor

@attribute [Authorize]

@if (Id == null)
{
    <PageTitle>Add a new movie</PageTitle>
    <FluentLabel Typo="Typography.PageTitle">Add a movie</FluentLabel>
}
else
{
    <PageTitle>Edit movie - @Movie.Name</PageTitle>
    <FluentLabel Typo="Typography.PageTitle">Edit @Movie.Name</FluentLabel>
}
<FluentGrid>
    <FluentGridItem xs="8">
        <EditForm Model="@Movie" OnValidSubmit="Submit" FormName="editMovie">
            <FluentStack Style="margin-top: 1em;">
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Label="Title"
                                     Placeholder="Enter the movie title"
                                     Required="true"
                                     Size=30
                                     @bind-Value="Movie!.Name" />

                    @if (Movie.MovieGenres.Count > 0)
                    {
                        int j = 1;
                        foreach (Genre genre in Movie.MovieGenres)
                        {
                            <FluentTextField Label=@("Genre " + (j))
                                             Placeholder="Enter the movie genre"
                                             Required="true"
                                             Size=30
                                             @bind-Value="@genre.Name" />
                            if (Movie.MovieGenres.Count > 1 && String.IsNullOrEmpty(genre.Name) && (Id == null || (j != OriginalGenres.Count)))
                            {
                                <FluentButton OnClick="@(() => RemoveGenre(genre.Id))" IconStart="@(new Icons.Regular.Size16.Delete())"></FluentButton>
                            }
                            j++;
                        }
                    }
                    <FluentButton OnClick="AddGenre" Appearance="Appearance.Accent">Add Genre</FluentButton>
                </FluentStack>

                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField Label="Director"
                                     Placeholder="Enter the movie director"
                                     Required="true"
                                     Size=30
                                     @bind-Value="Movie!.Director" />
                    <FluentNumberField Label="Release year"
                                       Placeholder="Enter the movie release year"
                                       Required="true"
                                       Size=26
                                       @bind-Value="Movie!.ReleaseYear" />
                    <FluentNumberField Label="Watched year"
                                       Placeholder="Enter the year you watched the movie"
                                       Required="true"
                                       Size=26
                                       @bind-Value="Movie!.WatchedYear" />
                    <FluentTextField Label="Viewing format"
                                     Placeholder="Enter the movie viewing format"
                                     Required="true"
                                     Size=30
                                     @bind-Value="Movie!.ViewingForm" />
                    <FluentSelect Items=@reviewOptions
                                  OptionText="@(i => i.Text)"
                                  OptionValue="@(i => i.Value)"
                                  OptionSelected="@(i => i.Selected)"
                                  Label="Did you enjoy/like the movie?"
                                  @bind-Value="Movie!.Review" />

                    <FluentStack Style="margin-top: 1em;">
                        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Loading="@Loading">Submit</FluentButton>
                        <FluentButton Appearance="Appearance.Accent" OnClick="ToMovies">Back to Movies</FluentButton>
                    </FluentStack>
                </FluentStack>
            </FluentStack>
        </EditForm>
    </FluentGridItem>
</FluentGrid>

@code {
    private bool Loading = false;

    static List<Option<string>> reviewOptions = new()
    {
        { new Option<string> { Value = "Yes", Text = "Yes", Selected = true } },
        { new Option<string> { Value = "No", Text = "No",  } },
    };

    [Parameter]
    public string? Id { get; set; }

    private ApplicationUser user { get; set; } = default!;

    [SupplyParameterFromForm]
    private MovieWithGenres Movie { get; set; } = new();

    private List<Genre> OriginalGenres { get; set; } = new();

    protected override void OnInitialized() => Movie ??= new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            MovieWithGenres DbMovie = await MovieService.GetMovieById(Id);
            if (DbMovie is not null)
            {
                Movie = DbMovie;
                reviewOptions = new()
                {
                    { new Option<string> { Value = Movie.Review, Text = Movie.Review, Selected = true } },
                    { new Option<string> { Value = Movie.Review == "Yes" ? "No" : "Yes", Text = Movie.Review == "Yes" ? "No" : "Yes",  } },
                };
            }
            else
            {
                ToastService.ShowError("No movie was found.");
                ToMovies();
                return;
            }

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id != null)
            {
                MovieWithGenres DbMovie = await MovieService.GetMovieById(Id);
                if (DbMovie is not null)
                {
                    OriginalGenres = DbMovie.MovieGenres;
                }

            }
        }
    }

    public void AddGenre()
    {
        Movie.MovieGenres.Add(new() { Name = string.Empty });
    }

    public void RemoveGenre(string id)
    {
        Movie.MovieGenres.Remove(Movie.MovieGenres.Find(g => g.Id == id)!);
    }

    async Task Submit()
    {
        Loading = true;
        if (Id == null)
        {
            Movie.UserId = user.Id;
            await MovieService.AddMovie(Movie);
            Loading = false;
        }
        else
        {
            await MovieService.UpdateMovie(Id, Movie);
            Loading = false;
        }
        NavigationManager.NavigateTo("/films");
    }

    public void ToMovies()
    {
        NavigationManager.NavigateTo("/films");
    }
}