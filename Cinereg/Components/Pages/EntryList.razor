@page "/movies"

@inject IMovieService MovieService
@inject UserAccessor UserAccessor

@attribute [StreamRendering(true)]

<PageTitle>Movies</PageTitle>

<FluentLabel Typo="Typography.PageTitle">Movie List</FluentLabel>

@if(movies == null)
{
    <span>Loading...</span>
}
else if(movies.Count == 0)
{
    <FluentLabel>No movies found.</FluentLabel>
}
else
{
    <FluentGrid>
        <FluentGridItem xs="12">
            <InteractiveDataGrid movies="@movies" />
        </FluentGridItem>
</FluentGrid>
}
<CreateMovieButton />

@code {
    private ApplicationUser user = default!;
    private List<Movie> movies = new();
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    // Without interactivity, pagination won't work
    //PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        movies = await MovieService.GetAllMovies(user.Id);
    }
}
