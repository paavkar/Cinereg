@page "/movies"

@inject IMovieService MovieService
@inject UserAccessor UserAccessor

@attribute [StreamRendering(true)]

<PageTitle>Movies</PageTitle>

<FluentLabel Typo="Typography.PageTitle">Movie List</FluentLabel>

@if(movies == null)
{
    <span>Loading...</span>
}
else if(movies.Count == 0)
{
    <FluentLabel>No movies found.</FluentLabel>
}
else
{
    <FluentGrid>
        <FluentGridItem xs="12">
            <FluentDataGrid Id="moviegrid" Items=@iMovies ResizableColumns="true" Style="height: 405px; overflow:auto;">
                <PropertyColumn Title="Title" Property="@(c => c!.Name)" Sortable="true" Align=Align.Start />
                <PropertyColumn Title="Release year" Property="@(c => c!.ReleaseYear)" Sortable="true" Align=Align.Center />
                <PropertyColumn Title="Watched year" Property="@(c => c!.WatchedYear)" Sortable="true" Align=Align.Center />
                <PropertyColumn Title="Viewing format" Property="@(c => c!.ViewingForm)" Sortable="true" Align=Align.Center />
                <PropertyColumn Title="Genre" Property="@(c => c!.Genre)" Sortable="true" Align=Align.Center />
                <PropertyColumn Title="Director" Property="@(c => c!.Director)" Sortable="true" Align=Align.Center />
                <PropertyColumn Title="Did I enjoy/like it?" Property="@(c => c!.Review)" Sortable="true" Align=Align.Center />
                <TemplateColumn Title="Actions" Align="@Align.End">
                    <EditMovieButton Id=@context.Id />
                    <DeleteMovieButton Id=@context.Id />
                </TemplateColumn>
            </FluentDataGrid>
            @*<FluentPaginator State="@pagination" />*@
        </FluentGridItem>
</FluentGrid>
}
<CreateMovieButton />

@code {
    private ApplicationUser user = default!;
    private List<Movie> movies = new();
    private IQueryable<Movie>? iMovies;
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    // Without interactivity, pagination won't work
    //PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        movies = await MovieService.GetAllMovies(user.Id);
        iMovies = movies.AsQueryable();
    }
}
