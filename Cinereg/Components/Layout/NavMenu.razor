@rendermode InteractiveAuto

@implements IDisposable

@inject NavigationManager NavigationManager

<nav>
    <FluentNavMenu Width="250" Collapsible="true" Title="Custom navigation menu">
        <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>
        <FluentNavLink Href="counter" Icon="@(new Icons.Regular.Size20.AddSquare())" IconColor="Color.Accent">Counter</FluentNavLink>
        <FluentNavLink Href="weather" Icon="@(new Icons.Regular.Size20.WeatherRainShowersDay())" IconColor="Color.Accent">Weather</FluentNavLink>
        <FluentNavLink Href="auth" Icon="@(new Icons.Regular.Size20.LockClosedKey())" IconColor="Color.Accent">Auth Required</FluentNavLink>
        <AuthorizeView>
            <Authorized>
                <FluentNavLink Href="movies" Icon="@(new Icons.Regular.Size20.MoviesAndTv())" IconColor="Color.Accent">Movies</FluentNavLink>
                <FluentNavLink Href="Account/Manage" Icon="@(new Icons.Regular.Size20.Person())">@context.User.Identity?.Name</FluentNavLink>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <FluentButton Type="ButtonType.Submit" Style="width: 100%;">Logout</FluentButton>
                </form>
            </Authorized>
            <NotAuthorized>
                <FluentNavLink Href="Account/Register">Register</FluentNavLink>
                <FluentNavLink Href="Account/Login">Login</FluentNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </FluentNavMenu>
</nav>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}